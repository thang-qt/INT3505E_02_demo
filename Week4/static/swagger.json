
openapi: 3.0.0
info:
  title: Library API
  version: 1.0.0
  description: A simple API for managing books and loans in a library.

servers:
  - url: http://127.0.0.1:5000
    description: Local Development Server

tags:
  - name: Books
    description: Operations related to library books
  - name: Loans
    description: Operations related to book loans

paths:
  /books:
    get:
      summary: Get all books
      operationId: getAllBooks
      tags:
        - Books
      responses:
        '200':
          description: A list of all books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Create a new book
      operationId: createBook
      tags:
        - Books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - author
                - publisher
                - publication_year
                - quantity
              properties:
                title:
                  type: string
                  example: The Great Gatsby
                author:
                  type: string
                  example: F. Scott Fitzgerald
                publisher:
                  type: string
                  example: Charles Scribner's Sons
                publication_year:
                  type: integer
                  example: 1925
                quantity:
                  type: integer
                  example: 5
      responses:
        '201':
          description: The newly created book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input / Missing fields

  /books/{book_id}:
    get:
      summary: Get a specific book by ID
      operationId: getBookById
      tags:
        - Books
      parameters:
        - in: path
          name: book_id
          schema:
            type: integer
          required: true
          description: ID of the book to retrieve
      responses:
        '200':
          description: The requested book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    put:
      summary: Update an existing book
      operationId: updateBook
      tags:
        - Books
      parameters:
        - in: path
          name: book_id
          schema:
            type: integer
          required: true
          description: ID of the book to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: The Great Gatsby (Revised Edition)
                author:
                  type: string
                  example: F. Scott Fitzgerald
                publisher:
                  type: string
                  example: Scribner
                publication_year:
                  type: integer
                  example: 1925
                quantity:
                  type: integer
                  example: 7
      responses:
        '200':
          description: The updated book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    delete:
      summary: Delete a book
      operationId: deleteBook
      tags:
        - Books
      parameters:
        - in: path
          name: book_id
          schema:
            type: integer
          required: true
          description: ID of the book to delete
      responses:
        '200':
          description: Book deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Book deleted
        '404':
          description: Book not found

  /borrow:
    post:
      summary: Borrow a book
      operationId: borrowBook
      tags:
        - Loans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - book_id
                - user_id
              properties:
                book_id:
                  type: integer
                  example: 1
                user_id:
                  type: integer
                  example: 101
      responses:
        '201':
          description: Book borrowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'
        '400':
          description: Book is out of stock or missing fields
        '404':
          description: Book not found

  /return:
    post:
      summary: Return a book
      operationId: returnBook
      tags:
        - Loans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - loan_id
              properties:
                loan_id:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Book returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Book returned successfully
        '404':
          description: Loan not found
        '400':
          description: Missing loan_id

  /loans:
    get:
      summary: Get all active loans
      operationId: getAllLoans
      tags:
        - Loans
      responses:
        '200':
          description: A list of all active loans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Loan'

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        title:
          type: string
          example: Số đỏ
        author:
          type: string
          example: Vũ Trọng Phụng
        publisher:
          type: string
          example: NXB Văn học
        publication_year:
          type: integer
          example: 1936
        quantity:
          type: integer
          example: 5
    Loan:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        user_id:
          type: integer
          example: 101
        book_id:
          type: integer
          example: 1
